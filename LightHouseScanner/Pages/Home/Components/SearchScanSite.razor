@using System.Timers;

@inject IJSRuntime JSRuntime
@inject ApiService ApiService

<section id="hero" class="hero section dark-background">

    <img src="https://img.freepik.com/free-photo/futurism-perspective-digital-nomads-lifestyle_23-2151252419.jpg?t=st=1722161020~exp=1722164620~hmac=7f106f683909f1bdaf65bd77873114f1282857b0c7faaac9a3d4e750b1928d70&w=1380"
         alt="" data-aos="fade-in" class="opacity-75">

    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="display-2 fw-normal mb-5" data-aos="fade-up" data-aos-delay="100">SiteScan+ Instant Website SEO Insights</h1>
                <h2 class="fs-2 fw-light mb-4" data-aos="fade-up" data-aos-delay="200">
                    Site Scan Plus, delivers quick and accurate insights of your Home Page performance using Google Lighthouse.
                </h2>
            </div>

            <div class="col-lg-8" data-aos="fade-up" data-aos-delay="300">
                <EditForm Model="@searchModel" OnValidSubmit="HandleSubmit" class="php-email-form">
                    <div class="sign-up-form">
                        <InputText @bind-Value="searchModel.Url" placeholder="Enter Your URL or Company Website to scan..."
                                   type="text" class="form-control m-0" />

                        @if (ButtonEnableDisable)
                        {
                            <button type="submit" class="btn btn-warning ms-2 ps-4 pe-4 btn-lg text-nowrap">
                                <i class="fa-solid fa-magnifying-glass me-2"></i>
                                Scan
                            </button>
                        }
                        else
                        {
                            <button disabled type="submit" class="btn btn-info ms-2 ps-4 pe-4 btn-lg text-nowrap text-dark">
                                <span>
                                    <i class="fa-solid fa-spinner fa-spin-pulse me-2"></i>
                                    Scanning (@AdSenceApprovalCheckerTimerSecs)
                                </span>
                            </button>
                        }
                    </div>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (isLoading)
                    {
                        <div class="loading">Loading...</div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">@errorMessage</div>
                    }
                    @if (isSuccess)
                    {
                        <div class="sent-message">Search completed successfully!</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {

    private SearchModel searchModel = new SearchModel();

    private WebsiteData WebsiteAuditData;
    private List<WebsiteData> WebsitesByUserSession;

    private bool isLoading = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    public string MetricsFontSize { get; set; } = "";

    public bool ButtonEnableDisable = true;
    private Timer AdSenceApprovalCheckerTimer;
    private int AdSenceApprovalCheckerTimerSecs = 50;

    public class SearchModel
    {
        [Required(ErrorMessage = "URL is required.")]
        [Url(ErrorMessage = "Invalid URL format.")]
        [DomainOrSubdomain(ErrorMessage = "URL does not contain a valid domain or subdomain.")]
        public string Url { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        MetricsFontSize = "font-size: 100px !important;";
        await Fetch6WebsitesByUserSessionId();
    }

    private async Task Fetch6WebsitesByUserSessionId()
    {
        string userSessionId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "UserSessionId");

        var response = await ApiService.Fetch6WebsitesByUserSessionId(userSessionId);
        if (response.IsSuccessStatusCode)
        {
            WebsitesByUserSession = await response.Content.ReadFromJsonAsync<List<WebsiteData>>();
        }
        else
        {
            // Handle error
            WebsitesByUserSession = new List<WebsiteData>();
        }
        StateHasChanged();
    }

    private void SetupTimer()
    {
        AdSenceApprovalCheckerTimer = new Timer(1000);
        AdSenceApprovalCheckerTimer.Elapsed += AdSenceApprovalCheckerTimerAsync;
    }

    private async Task HandleSubmit()
    {
        SetupTimer();
        isLoading = true;
        errorMessage = string.Empty;
        WebsiteAuditData = new WebsiteData();
        ButtonEnableDisable = false;
        AdSenceApprovalCheckerTimerSecs = 60;
        AdSenceApprovalCheckerTimer.Enabled = true;
        AdSenceApprovalCheckerTimer.Start();
        StateHasChanged();

        try
        {
            // Validate the URL (basic validation)
            if (!Uri.IsWellFormedUriString(searchModel.Url, UriKind.Absolute))
            {
                errorMessage = "Invalid URL format.";
                return;
            }

            string userSessionId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "UserSessionId");

            // Simulate an HTTP POST request
            var response = await ApiService.FetchAndSaveLighthouseReportAsync(searchModel.Url, userSessionId);

            if (response.IsSuccessStatusCode)
            {


                WebsiteAuditData = await response.Content.ReadFromJsonAsync<WebsiteData>();


                if (string.IsNullOrEmpty(WebsiteAuditData.Message))
                {
                    await JSRuntime.InvokeVoidAsync("scrollDown");
                    isSuccess = true;

                    // Trigger SweetAlert2 Toast Notification
                    await JSRuntime.InvokeVoidAsync("showToast", "success", "Audit completed successfully!");

                    await Fetch6WebsitesByUserSessionId();
                }
                else
                {
                    // Trigger SweetAlert2 Toast Notification
                    await JSRuntime.InvokeVoidAsync("showToast", "error", WebsiteAuditData.Message);

                }
            }
            else
            {
                // Handle error
                errorMessage = "An error occurred while fetching the report.";
                WebsiteAuditData = new WebsiteData();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            StopTimer();
            isLoading = false;
        }

        StateHasChanged();
    }

    private void AdSenceApprovalCheckerTimerAsync(object sender, ElapsedEventArgs e)
    {
        if (AdSenceApprovalCheckerTimerSecs > 0)
        {
            AdSenceApprovalCheckerTimerSecs--;
            StateHasChanged();
        }
        else
        {
            StopTimer();
        }
    }

    private void StopTimer()
    {
        AdSenceApprovalCheckerTimerSecs = 0;
        AdSenceApprovalCheckerTimer.Stop();
        AdSenceApprovalCheckerTimer.Dispose();
        ButtonEnableDisable = true;
        StateHasChanged();
    }
}

@if (WebsiteAuditData != null && !string.IsNullOrEmpty(WebsiteAuditData.DomainName))
{
    <section id="scanresults" class="features section">

        <div class="container section-title pb-3" data-aos="fade-up">
            <h3 class="fw-bold">Google LightHouse Scan Result</h3>
        </div>

        <div class="container">
            <div class="card shadow-sm p-4">
                <div class="row gy-4 align-items-stretch justify-content-between features-item ">
                    <div class="col-lg-6 d-flex align-items-center features-img-bg" data-aos="zoom-out">
                        <img src="@WebsiteAuditData.FinalScreenshot" style="border:none !important" class="img-fluid rounded shadow p-0 m-0" alt="">
                    </div>

                    <div class="col-lg-6">

                        <div class="row ps-2">

                            <div class="col-12 mb-3">

                                <h5 class="card-title text-center mt-2">
                                    <a href="@WebsiteAuditData.DomainName" target="_blank" class="anchor-hover fs-3">
                                        @WebsiteAuditData.DomainName
                                    </a>
                                </h5>
                            </div>

                            <div class="col-md-3 text-center">
                                <div class="inner-content text-center m-1 m-md-0">
                                    <div class="c100 center @string.Format("p" + @WebsiteAuditData.Performance) @CommonExtensions.GetCSSPercentageClass(@WebsiteAuditData.Performance.ToString())" style="@MetricsFontSize">
                                        <span>@WebsiteAuditData.Performance</span>
                                        <div class="slice"><div class="bar"></div><div class="fill"></div></div>
                                    </div>
                                </div>
                                <p class="text-success pt-2 fs-6">Performance</p>
                            </div>

                            <div class="col-md-3 text-center">
                                <div class="inner-content text-center m-1 m-md-0">
                                    <div class="c100 center @string.Format("p" + @WebsiteAuditData.Accessibility) @CommonExtensions.GetCSSPercentageClass(@WebsiteAuditData.Accessibility.ToString())" style="@MetricsFontSize">
                                        <span>@WebsiteAuditData.Accessibility</span>
                                        <div class="slice"><div class="bar"></div><div class="fill"></div></div>
                                    </div>
                                </div>
                                <p class="text-success pt-2 fs-6">Accessibility</p>
                            </div>

                            <div class="col-md-3 text-center">
                                <div class="inner-content text-center m-1 m-md-0">
                                    <div class="c100 center @string.Format("p" + @WebsiteAuditData.BestPractices) @CommonExtensions.GetCSSPercentageClass(@WebsiteAuditData.BestPractices.ToString())" style="@MetricsFontSize">
                                        <span>@WebsiteAuditData.BestPractices</span>
                                        <div class="slice"><div class="bar"></div><div class="fill"></div></div>
                                    </div>
                                </div>
                                <p class="text-success pt-2 fs-6">Best Practices</p>
                            </div>

                            <div class="col-md-3 text-center">
                                <div class="inner-content text-center m-1 m-md-0">
                                    <div class="c100 center @string.Format("p" + @WebsiteAuditData.Seo) @CommonExtensions.GetCSSPercentageClass(@WebsiteAuditData.Seo.ToString())" style="@MetricsFontSize">
                                        <span>@WebsiteAuditData.Seo</span>
                                        <div class="slice"><div class="bar"></div><div class="fill"></div></div>
                                    </div>
                                </div>
                                <p class="text-success pt-2 fs-6">SEO</p>
                            </div>

                            <div class="col-12 mt-2">
                                <hr class="horizontal dark mt-0">
                                <WebsiteDetailMetricsBig Website="WebsiteAuditData" />
                            </div>
                        </div>

                    </div>
                </div>



            </div>
        </div>

    </section>
}

<Top6WebsitesByUserSessionId websiteDataList="WebsitesByUserSession" />
